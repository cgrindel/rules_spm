load("@cgrindel_bazel_doc//lib:write_header.bzl", "write_header")
load("@cgrindel_bazel_doc//lib:providers.bzl", doc_providers = "providers")
load("@cgrindel_bazel_doc//lib:stardoc_for_prov.bzl", "stardoc_for_provs")
load("@cgrindel_bazel_doc//lib:diff_test_for_provs.bzl", "diff_test_for_provs")
load("@cgrindel_bazel_doc//lib:update_doc.bzl", "update_doc")
load("@cgrindel_bazel_doc//lib:write_doc.bzl", "write_doc")
load("@cgrindel_bazel_doc//lib:doc_utilities.bzl", "doc_utilities")

# Lovingly inspired by
# https://github.com/bazelbuild/rules_swift/blob/021c11b1d578ffba547140eb24854cdfe74c794f/doc/BUILD.bazel#L3

# MARK: - Documentation Declarations

_API_SRCS = [
    "spm_common",
    "spm_package_info_utils",
    "spm_versions",
    "packages",
    "package_descriptions",
    "providers",
    "platforms",
    "references",
    "repository_utils",
]

_DOC_WITH_SYMBOLS = {
    "build_rules": [
        "spm_archive",
        "spm_clang_library",
        "spm_filegroup",
        "spm_package",
        "spm_swift_binary",
        "spm_swift_library",
        "spm_system_library",
    ],
    "providers": [
        "SPMPackageInfo",
        "SPMPackagesInfo",
        "SPMPlatformInfo",
        "SPMToolchainInfo",
    ],
    "workspace_rules": [
        "spm_repositories",
        "spm_pkg",
        "spm_rules_dependencies",
    ],
}

_API_DOC_PROVIDERS = [
    doc_providers.create_api(
        name = name,
        stardoc_input = "//spm:spm.bzl",
    )
    for name in _API_SRCS
]

_ALL_DOC_PROVIDERS = [
    doc_providers.create_with_symbols(
        name = name,
        stardoc_input = "//spm:spm.bzl",
        symbols = symbols,
    )
    for [
        name,
        symbols,
    ] in _DOC_WITH_SYMBOLS.items()
] + [
    doc_providers.create(
        name = "api",
        is_stardoc = False,
        stardoc_input = "//spm:spm.bzl",
    ),
] + _API_DOC_PROVIDERS

# MARK: - Special Case api.md

# Write the api.md_ file as a special case.
write_doc(
    name = "api_doc",
    out = "api.md_",
    content = [
        "# Build API",
        "",
        "The APIs described below are used by [the workspace rules](/doc/workspace_rules.md) and",
        "[the build rules](/doc/build_rules.md) to facilitate the build and exposition of the",
        "Swift packages.",
        "",
    ] + [
        doc_utilities.toc_entry(
            r,
            "/doc/{0}.md".format(r),
        )
        for r in _API_SRCS
    ] + [
        "",
    ],
)

# MARK: - Headers

write_header(
    name = "providers_header",
    doc_provs = _DOC_WITH_SYMBOLS["providers"],
    header_content = [
        "# Providers",
        "",
        "The providers described below are used by [the build rules](/doc/build_rules.md) to",
        "facilitate the build and exposition of the Swift packages.",
    ],
)

write_header(
    name = "build_rules_header",
    doc_provs = _DOC_WITH_SYMBOLS["build_rules"],
    header_content = [
        "# Build Rules",
        "",
        "The rules described below are used to build Swift",
        "packages and make their outputs available as Bazel targets. Most",
        "clients will not use these rules directly. They are an implementation",
        "detail for [the workspace rules](/doc/workspace_rules.md).",
    ],
)

write_header(
    name = "workspace_rules_header",
    doc_provs = _DOC_WITH_SYMBOLS["workspace_rules"],
    header_content = [
        "# Workspace Rules",
        "",
        "The rules and functions described below are used in your WORKSPACE file to",
        "confgure `rules_spm` and to declare the Swift packages that are dependencies",
        "of your project.",
    ],
)

[
    write_header(
        name = doc_prov.header_label,
        out = doc_prov.header_basename,
        header_content = [
            # The `-4` is truncating `_api`
            "# `{name}` API".format(name = doc_prov.name[:-4]),
        ],
    )
    for doc_prov in _API_DOC_PROVIDERS
    if doc_prov.is_stardoc
]

# MARK: - Stardoc Declarations

stardoc_for_provs(
    doc_provs = _ALL_DOC_PROVIDERS,
    deps = ["//spm"],
)

# MARK: - Doc Diff Tests

# To make these tests pass, run
# bazel run //doc:update
diff_test_for_provs(doc_provs = _ALL_DOC_PROVIDERS)

# MARK: - Update Doc

update_doc(doc_provs = _ALL_DOC_PROVIDERS)
