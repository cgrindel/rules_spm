load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@io_bazel_stardoc//stardoc:stardoc.bzl", "stardoc")

# Lovingly inspired by
# https://github.com/bazelbuild/rules_swift/blob/021c11b1d578ffba547140eb24854cdfe74c794f/doc/BUILD.bazel#L3

_DOC_SRCS = {
    # "api": [
    #     "spm_common",
    #     "spm_package_info_utils",
    #     "spm_versions",
    #     "packages",
    #     "package_descriptions",
    #     "providers",
    #     "platforms",
    #     "references",
    #     "repositories",
    #     "repository_utils",
    # ],
    # "private_rules": [
    #     "spm_archive",
    #     "spm_clang_library",
    #     "spm_filegroup",
    #     "spm_package",
    #     "spm_swift_binary",
    #     "spm_swift_library",
    #     "spm_system_library",
    # ],
    # "providers": [
    #     "SPMBuildInfo",
    #     "SPMPackageInfo",
    #     "SPMPackagesInfo",
    #     "SPMPlatformInfo",
    # ],
    "rules": [
        "spm_repositories",
        "spm_pkg",
    ],
}

# write_file(
#     name = "api_header",
#     out = "api_header.vm",
#     content = [
#         "<!-- Generated with Stardoc, Do Not Edit! -->",
#         "# Build API",
#         "",
#         "On this page:",
#         "",
#     ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["api"]] + [
#         "",
#     ],
# )

# write_file(
#     name = "providers_header",
#     out = "providers_header.vm",
#     content = [
#         "<!-- Generated with Stardoc, Do Not Edit! -->",
#         "# Providers",
#         "",
#         "On this page:",
#         "",
#     ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["providers"]] + [
#         "",
#     ],
# )

# write_file(
#     name = "private_rules_header",
#     out = "private_rules_header.vm",
#     content = [
#         "<!-- Generated with Stardoc, Do Not Edit! -->",
#         "# Private Rules",
#         # "${moduleDocstring}",
#         "On this page:",
#         "",
#     ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["private_rules"]] + [
#         "",
#     ],
# )

# write_file(
#     name = "rules_header",
#     out = "rules_header.vm",
#     content = [
#         "<!-- Generated with Stardoc, Do Not Edit! -->",
#         "# Rules",
#         # "${moduleDocstring}",
#         "On this page:",
#         "",
#     ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["rules"]] + [
#         "",
#     ],
# )

# [
#     stardoc(
#         name = file + "_doc",
#         out = file + ".md_",
#         header_template = file + "_header.vm",
#         input = "//spm:spm.bzl",
#         symbol_names = symbols,
#         deps = ["//spm"],
#     )
#     for [
#         file,
#         symbols,
#     ] in _DOC_SRCS.items()
# ]

# # To make these tests pass, run
# # bazel run //doc:update
# [
#     diff_test(
#         name = "test_" + file,
#         file1 = file + ".md_",
#         file2 = file + ".md",
#     )
#     for file in _DOC_SRCS.keys()
# ]

# write_file(
#     name = "gen_update",
#     out = "update.sh",
#     content = [
#         "#!/usr/bin/env bash",
#         "cd $BUILD_WORKSPACE_DIRECTORY",
#     ] + [
#         "cp -fv bazel-bin/doc/{0}.md_ doc/{0}.md".format(
#             file,
#         )
#         for file in _DOC_SRCS.keys()
#     ],
# )

# sh_binary(
#     name = "update",
#     srcs = ["update.sh"],
#     data = [file + ".md_" for file in _DOC_SRCS.keys()],
# )

# DEBUG BEGIN
# stardoc(
#     name = "foo_doc",
#     out = "foo_doc.md",
#     input = "//spm:foo.bzl",
#     # symbol_names = [
#     #     "spm_repositories",
#     #     "spm_pkg",
#     #     "spm_package",
#     #     "spm_swift_binary"
#     # ],
#     deps = [
#         "//spm",
#     ],
# )
# DEBUG END

stardoc(
    name = "spm_doc",
    out = "spm_doc.md",
    input = "//spm:spm.bzl",
    symbol_names = [
        "spm_repositories",
        "spm_pkg",
        "spm_package",
    ],
    deps = [
        "//spm",
    ],
)
