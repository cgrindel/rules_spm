load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@io_bazel_stardoc//stardoc:stardoc.bzl", "stardoc")

# Lovingly inspired by
# https://github.com/bazelbuild/rules_swift/blob/021c11b1d578ffba547140eb24854cdfe74c794f/doc/BUILD.bazel#L3

_DOC_SRCS = {
    "api": [
        "spm_common",
        "spm_package_info_utils",
        "spm_versions",
        "packages",
        "package_descriptions",
        "providers",
        "platforms",
        "references",
        "repository_utils",
    ],
    "build_rules": [
        "spm_archive",
        "spm_clang_library",
        "spm_filegroup",
        "spm_package",
        "spm_swift_binary",
        "spm_swift_library",
        "spm_system_library",
    ],
    "providers": [
        "SPMBuildInfo",
        "SPMPackageInfo",
        "SPMPackagesInfo",
        "SPMPlatformInfo",
    ],
    "workspace_rules": [
        "spm_repositories",
        "spm_pkg",
        "spm_rules_dependencies",
    ],
}

write_file(
    name = "api_header",
    out = "api_header.vm",
    content = [
        "<!-- Generated with Stardoc, Do Not Edit! -->",
        "# Build API",
        "",
        "The APIs described below are used by [the workspace rules](/doc/workspace_rules.md) and",
        "[the build rules](/doc/build_rules.md) to facilitate the build and exposition of the",
        "Swift packages.",
        "",
        "On this page:",
        "",
    ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["api"]] + [
        "",
    ],
)

write_file(
    name = "providers_header",
    out = "providers_header.vm",
    content = [
        "<!-- Generated with Stardoc, Do Not Edit! -->",
        "# Providers",
        "",
        "The providers described below are used by [the build rules](/doc/build_rules.md) to",
        "facilitate the build and exposition of the Swift packages.",
        "",
        "On this page:",
        "",
    ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["providers"]] + [
        "",
    ],
)

write_file(
    name = "build_rules_header",
    out = "build_rules_header.vm",
    content = [
        "<!-- Generated with Stardoc, Do Not Edit! -->",
        "# Build Rules",
        "",
        "The rules described below are used to build Swift",
        "packages and make their outputs available as Bazel targets. Most",
        "clients will not use these rules directly. They are an implementation",
        "detail for [the workspace rules](/doc/workspace_rules.md).",
        "",
        "On this page:",
        "",
    ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["build_rules"]] + [
        "",
    ],
)

write_file(
    name = "workspace_rules_header",
    out = "workspace_rules_header.vm",
    content = [
        "<!-- Generated with Stardoc, Do Not Edit! -->",
        "# Workspace Rules",
        "",
        "The rules and functions described below are used in your WORKSPACE file to",
        "confgure `rules_spm` and to declare the Swift packages that are dependencies",
        "of your project.",
        "",
        "On this page:",
        "",
    ] + ["  * [{0}](#{0})".format(r) for r in _DOC_SRCS["workspace_rules"]] + [
        "",
    ],
)

[
    stardoc(
        name = file + "_doc",
        out = file + ".md_",
        header_template = file + "_header.vm",
        input = "//spm:spm.bzl",
        symbol_names = symbols,
        deps = ["//spm"],
    )
    for [
        file,
        symbols,
    ] in _DOC_SRCS.items()
]

# To make these tests pass, run
# bazel run //doc:update
[
    diff_test(
        name = "test_" + file,
        file1 = file + ".md_",
        file2 = file + ".md",
    )
    for file in _DOC_SRCS.keys()
]

write_file(
    name = "gen_update",
    out = "update.sh",
    content = [
        "#!/usr/bin/env bash",
        "cd $BUILD_WORKSPACE_DIRECTORY",
    ] + [
        "cp -fv bazel-bin/doc/{0}.md_ doc/{0}.md".format(
            file,
        )
        for file in _DOC_SRCS.keys()
    ],
)

sh_binary(
    name = "update",
    srcs = ["update.sh"],
    data = [file + ".md_" for file in _DOC_SRCS.keys()],
)
