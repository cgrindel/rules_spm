workspace(name = "simple_with_binary_example")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

local_repository(
    name = "cgrindel_rules_spm",
    path = "../..",
)

load(
    "@cgrindel_rules_spm//spm:deps.bzl",
    "spm_rules_dependencies",
)

spm_rules_dependencies()

load("@cgrindel_bazel_starlib//:deps.bzl", "bazel_starlib_dependencies")

bazel_starlib_dependencies()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load(
    "@build_bazel_rules_swift//swift:repositories.bzl",
    "swift_rules_dependencies",
)

swift_rules_dependencies()

load(
    "@build_bazel_rules_swift//swift:extras.bzl",
    "swift_rules_extra_dependencies",
)

swift_rules_extra_dependencies()

load("@cgrindel_rules_spm//spm:defs.bzl", "spm_pkg", "spm_repositories")

# This set of packages are used as dependencies for the project.
spm_repositories(
    name = "swift_pkgs",
    dependencies = [
        spm_pkg(
            "https://github.com/apple/swift-log.git",
            from_version = "1.0.0",
            products = ["Logging"],
        ),
    ],
)

# This set of packages provide binaries that are helpful for maintaining the
# project. While these packages could have neen declared in `swift_pkgs`, it
# would have required that we add a platform restriction to our project
# dependencies, which may be undesirable. Declaring them in a separate
# `spm_repositories` avoids this complication.
spm_repositories(
    name = "swift_utils",
    dependencies = [
        spm_pkg(
            "https://github.com/realm/SwiftLint.git",
            from_version = "0.0.0",
            products = ["swiftlint"],
        ),
        spm_pkg(
            "https://github.com/nicklockwood/SwiftFormat.git",
            from_version = "0.0.0",
            products = [
                "swiftformat",
            ],
        ),
    ],
    platforms = [
        ".macOS(.v10_12)",
    ],
)
