load(
    "//tools/bazel_integration_test:bazel_integration_test.bzl",
    "bazel_integration_test",
    "glob_workspace_files",
)

BAZEL_TEST_EXAMPLES = [
    "simple",
    "simple_revision",
    "simple_with_binary",
    "ios_sim",
    # GH090: Disabled tests due to error:
    # "Library not loaded: /usr/lib/swift/libswift_Concurrency.dylib"
    # "local_package",
    # "vapor",
]

INTEGRATION_TESTS = [example + "_test" for example in BAZEL_TEST_EXAMPLES]

INTEGRATION_TEST_TAGS = [
    "exclusive",
    "manual",
]

ADDITIONAL_WORKSPACE_FILES = [
    # The example workspaces reference the *.bazelrc files in the parent.
    "//:shared_bazelrc_files",

    # The example workspaces use local_repository to reference this
    # workspace.  This target collects all of the files needed for
    # rules_spm to work in the child workspaces.
    "//:local_repository_files",
]

test_suite(
    name = "integration_tests",
    tags = INTEGRATION_TEST_TAGS,
    tests = [test for test in INTEGRATION_TESTS],
)

# TODO: Get the tests that have special setup working.
#  - Consider moving the bazel_cmds to be a function that provides a runner?

[
    bazel_integration_test(
        name = example + "_test",
        bazel_cmds = [
            "info",
            "test //...",
        ],
        # The test needs to be local due to the operations that rules_spm performs.
        local = True,
        tags = INTEGRATION_TEST_TAGS,
        workspace_files = glob_workspace_files(example) +
                          ADDITIONAL_WORKSPACE_FILES,
    )
    for example in BAZEL_TEST_EXAMPLES
]

bazel_integration_test(
    name = "incompatible_xcode_use_dev_dir_attr_test",
    # The test needs to be local due to the operations that rules_spm performs.
    local = True,
    tags = INTEGRATION_TEST_TAGS,
    test_runner_srcs = ["incompatible_xcode_use_dev_dir_attr_test.sh"],
    workspace_files = glob_workspace_files("simple_with_dev_dir") +
                      ADDITIONAL_WORKSPACE_FILES,
    workspace_path = "simple_with_dev_dir",
)
